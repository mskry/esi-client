/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GetCorporationsCorporationIdStructuresService } from './GetCorporationsCorporationIdStructuresService';
import {
    GetCorporationsCorporationIdStructuresServiceFromJSON,
    GetCorporationsCorporationIdStructuresServiceFromJSONTyped,
    GetCorporationsCorporationIdStructuresServiceToJSON,
    GetCorporationsCorporationIdStructuresServiceToJSONTyped,
} from './GetCorporationsCorporationIdStructuresService';

/**
 * 200 ok object
 * @export
 * @interface GetCorporationsCorporationIdStructures200Ok
 */
export interface GetCorporationsCorporationIdStructures200Ok {
    /**
     * ID of the corporation that owns the structure
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    corporationId: number;
    /**
     * Date on which the structure will run out of fuel
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    fuelExpires?: Date;
    /**
     * The structure name
     * @type {string}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    name?: string;
    /**
     * The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    nextReinforceApply?: Date;
    /**
     * The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    nextReinforceHour?: number;
    /**
     * The id of the ACL profile for this citadel
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    profileId: number;
    /**
     * The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    reinforceHour?: number;
    /**
     * Contains a list of service upgrades, and their state
     * @type {Array<GetCorporationsCorporationIdStructuresService>}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    services?: Array<GetCorporationsCorporationIdStructuresService>;
    /**
     * state string
     * @type {string}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    state: GetCorporationsCorporationIdStructures200OkStateEnum;
    /**
     * Date at which the structure will move to it's next state
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    stateTimerEnd?: Date;
    /**
     * Date at which the structure entered it's current state
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    stateTimerStart?: Date;
    /**
     * The Item ID of the structure
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    structureId: number;
    /**
     * The solar system the structure is in
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    systemId: number;
    /**
     * The type id of the structure
     * @type {number}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    typeId: number;
    /**
     * Date at which the structure will unanchor
     * @type {Date}
     * @memberof GetCorporationsCorporationIdStructures200Ok
     */
    unanchorsAt?: Date;
}


/**
 * @export
 */
export const GetCorporationsCorporationIdStructures200OkStateEnum = {
    AnchorVulnerable: 'anchor_vulnerable',
    Anchoring: 'anchoring',
    ArmorReinforce: 'armor_reinforce',
    ArmorVulnerable: 'armor_vulnerable',
    DeployVulnerable: 'deploy_vulnerable',
    FittingInvulnerable: 'fitting_invulnerable',
    HullReinforce: 'hull_reinforce',
    HullVulnerable: 'hull_vulnerable',
    OnlineDeprecated: 'online_deprecated',
    OnliningVulnerable: 'onlining_vulnerable',
    ShieldVulnerable: 'shield_vulnerable',
    Unanchored: 'unanchored',
    Unknown: 'unknown'
} as const;
export type GetCorporationsCorporationIdStructures200OkStateEnum = typeof GetCorporationsCorporationIdStructures200OkStateEnum[keyof typeof GetCorporationsCorporationIdStructures200OkStateEnum];


/**
 * Check if a given object implements the GetCorporationsCorporationIdStructures200Ok interface.
 */
export function instanceOfGetCorporationsCorporationIdStructures200Ok(value: object): value is GetCorporationsCorporationIdStructures200Ok {
    if (!('corporationId' in value) || value['corporationId'] === undefined) return false;
    if (!('profileId' in value) || value['profileId'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('structureId' in value) || value['structureId'] === undefined) return false;
    if (!('systemId' in value) || value['systemId'] === undefined) return false;
    if (!('typeId' in value) || value['typeId'] === undefined) return false;
    return true;
}

export function GetCorporationsCorporationIdStructures200OkFromJSON(json: any): GetCorporationsCorporationIdStructures200Ok {
    return GetCorporationsCorporationIdStructures200OkFromJSONTyped(json, false);
}

export function GetCorporationsCorporationIdStructures200OkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetCorporationsCorporationIdStructures200Ok {
    if (json == null) {
        return json;
    }
    return {
        
        'corporationId': json['corporation_id'],
        'fuelExpires': json['fuel_expires'] == null ? undefined : (new Date(json['fuel_expires'])),
        'name': json['name'] == null ? undefined : json['name'],
        'nextReinforceApply': json['next_reinforce_apply'] == null ? undefined : (new Date(json['next_reinforce_apply'])),
        'nextReinforceHour': json['next_reinforce_hour'] == null ? undefined : json['next_reinforce_hour'],
        'profileId': json['profile_id'],
        'reinforceHour': json['reinforce_hour'] == null ? undefined : json['reinforce_hour'],
        'services': json['services'] == null ? undefined : ((json['services'] as Array<any>).map(GetCorporationsCorporationIdStructuresServiceFromJSON)),
        'state': json['state'],
        'stateTimerEnd': json['state_timer_end'] == null ? undefined : (new Date(json['state_timer_end'])),
        'stateTimerStart': json['state_timer_start'] == null ? undefined : (new Date(json['state_timer_start'])),
        'structureId': json['structure_id'],
        'systemId': json['system_id'],
        'typeId': json['type_id'],
        'unanchorsAt': json['unanchors_at'] == null ? undefined : (new Date(json['unanchors_at'])),
    };
}

export function GetCorporationsCorporationIdStructures200OkToJSON(json: any): GetCorporationsCorporationIdStructures200Ok {
    return GetCorporationsCorporationIdStructures200OkToJSONTyped(json, false);
}

export function GetCorporationsCorporationIdStructures200OkToJSONTyped(value?: GetCorporationsCorporationIdStructures200Ok | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'corporation_id': value['corporationId'],
        'fuel_expires': value['fuelExpires'] == null ? undefined : ((value['fuelExpires']).toISOString()),
        'name': value['name'],
        'next_reinforce_apply': value['nextReinforceApply'] == null ? undefined : ((value['nextReinforceApply']).toISOString()),
        'next_reinforce_hour': value['nextReinforceHour'],
        'profile_id': value['profileId'],
        'reinforce_hour': value['reinforceHour'],
        'services': value['services'] == null ? undefined : ((value['services'] as Array<any>).map(GetCorporationsCorporationIdStructuresServiceToJSON)),
        'state': value['state'],
        'state_timer_end': value['stateTimerEnd'] == null ? undefined : ((value['stateTimerEnd']).toISOString()),
        'state_timer_start': value['stateTimerStart'] == null ? undefined : ((value['stateTimerStart']).toISOString()),
        'structure_id': value['structureId'],
        'system_id': value['systemId'],
        'type_id': value['typeId'],
        'unanchors_at': value['unanchorsAt'] == null ? undefined : ((value['unanchorsAt']).toISOString()),
    };
}

