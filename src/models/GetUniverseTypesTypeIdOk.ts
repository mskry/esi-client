/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GetUniverseTypesTypeIdDogmaAttribute } from './GetUniverseTypesTypeIdDogmaAttribute';
import {
    GetUniverseTypesTypeIdDogmaAttributeFromJSON,
    GetUniverseTypesTypeIdDogmaAttributeFromJSONTyped,
    GetUniverseTypesTypeIdDogmaAttributeToJSON,
    GetUniverseTypesTypeIdDogmaAttributeToJSONTyped,
} from './GetUniverseTypesTypeIdDogmaAttribute';
import type { GetUniverseTypesTypeIdDogmaEffect } from './GetUniverseTypesTypeIdDogmaEffect';
import {
    GetUniverseTypesTypeIdDogmaEffectFromJSON,
    GetUniverseTypesTypeIdDogmaEffectFromJSONTyped,
    GetUniverseTypesTypeIdDogmaEffectToJSON,
    GetUniverseTypesTypeIdDogmaEffectToJSONTyped,
} from './GetUniverseTypesTypeIdDogmaEffect';

/**
 * 200 ok object
 * @export
 * @interface GetUniverseTypesTypeIdOk
 */
export interface GetUniverseTypesTypeIdOk {
    /**
     * capacity number
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    capacity?: number;
    /**
     * description string
     * @type {string}
     * @memberof GetUniverseTypesTypeIdOk
     */
    description: string;
    /**
     * dogma_attributes array
     * @type {Array<GetUniverseTypesTypeIdDogmaAttribute>}
     * @memberof GetUniverseTypesTypeIdOk
     */
    dogmaAttributes?: Array<GetUniverseTypesTypeIdDogmaAttribute>;
    /**
     * dogma_effects array
     * @type {Array<GetUniverseTypesTypeIdDogmaEffect>}
     * @memberof GetUniverseTypesTypeIdOk
     */
    dogmaEffects?: Array<GetUniverseTypesTypeIdDogmaEffect>;
    /**
     * graphic_id integer
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    graphicId?: number;
    /**
     * group_id integer
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    groupId: number;
    /**
     * icon_id integer
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    iconId?: number;
    /**
     * This only exists for types that can be put on the market
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    marketGroupId?: number;
    /**
     * mass number
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    mass?: number;
    /**
     * name string
     * @type {string}
     * @memberof GetUniverseTypesTypeIdOk
     */
    name: string;
    /**
     * packaged_volume number
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    packagedVolume?: number;
    /**
     * portion_size integer
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    portionSize?: number;
    /**
     * published boolean
     * @type {boolean}
     * @memberof GetUniverseTypesTypeIdOk
     */
    published: boolean;
    /**
     * radius number
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    radius?: number;
    /**
     * type_id integer
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    typeId: number;
    /**
     * volume number
     * @type {number}
     * @memberof GetUniverseTypesTypeIdOk
     */
    volume?: number;
}

/**
 * Check if a given object implements the GetUniverseTypesTypeIdOk interface.
 */
export function instanceOfGetUniverseTypesTypeIdOk(value: object): value is GetUniverseTypesTypeIdOk {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('groupId' in value) || value['groupId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('published' in value) || value['published'] === undefined) return false;
    if (!('typeId' in value) || value['typeId'] === undefined) return false;
    return true;
}

export function GetUniverseTypesTypeIdOkFromJSON(json: any): GetUniverseTypesTypeIdOk {
    return GetUniverseTypesTypeIdOkFromJSONTyped(json, false);
}

export function GetUniverseTypesTypeIdOkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetUniverseTypesTypeIdOk {
    if (json == null) {
        return json;
    }
    return {
        
        'capacity': json['capacity'] == null ? undefined : json['capacity'],
        'description': json['description'],
        'dogmaAttributes': json['dogma_attributes'] == null ? undefined : ((json['dogma_attributes'] as Array<any>).map(GetUniverseTypesTypeIdDogmaAttributeFromJSON)),
        'dogmaEffects': json['dogma_effects'] == null ? undefined : ((json['dogma_effects'] as Array<any>).map(GetUniverseTypesTypeIdDogmaEffectFromJSON)),
        'graphicId': json['graphic_id'] == null ? undefined : json['graphic_id'],
        'groupId': json['group_id'],
        'iconId': json['icon_id'] == null ? undefined : json['icon_id'],
        'marketGroupId': json['market_group_id'] == null ? undefined : json['market_group_id'],
        'mass': json['mass'] == null ? undefined : json['mass'],
        'name': json['name'],
        'packagedVolume': json['packaged_volume'] == null ? undefined : json['packaged_volume'],
        'portionSize': json['portion_size'] == null ? undefined : json['portion_size'],
        'published': json['published'],
        'radius': json['radius'] == null ? undefined : json['radius'],
        'typeId': json['type_id'],
        'volume': json['volume'] == null ? undefined : json['volume'],
    };
}

export function GetUniverseTypesTypeIdOkToJSON(json: any): GetUniverseTypesTypeIdOk {
    return GetUniverseTypesTypeIdOkToJSONTyped(json, false);
}

export function GetUniverseTypesTypeIdOkToJSONTyped(value?: GetUniverseTypesTypeIdOk | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'capacity': value['capacity'],
        'description': value['description'],
        'dogma_attributes': value['dogmaAttributes'] == null ? undefined : ((value['dogmaAttributes'] as Array<any>).map(GetUniverseTypesTypeIdDogmaAttributeToJSON)),
        'dogma_effects': value['dogmaEffects'] == null ? undefined : ((value['dogmaEffects'] as Array<any>).map(GetUniverseTypesTypeIdDogmaEffectToJSON)),
        'graphic_id': value['graphicId'],
        'group_id': value['groupId'],
        'icon_id': value['iconId'],
        'market_group_id': value['marketGroupId'],
        'mass': value['mass'],
        'name': value['name'],
        'packaged_volume': value['packagedVolume'],
        'portion_size': value['portionSize'],
        'published': value['published'],
        'radius': value['radius'],
        'type_id': value['typeId'],
        'volume': value['volume'],
    };
}

