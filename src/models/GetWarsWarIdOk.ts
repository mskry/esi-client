/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GetWarsWarIdAggressor } from './GetWarsWarIdAggressor';
import {
    GetWarsWarIdAggressorFromJSON,
    GetWarsWarIdAggressorFromJSONTyped,
    GetWarsWarIdAggressorToJSON,
    GetWarsWarIdAggressorToJSONTyped,
} from './GetWarsWarIdAggressor';
import type { GetWarsWarIdAlly } from './GetWarsWarIdAlly';
import {
    GetWarsWarIdAllyFromJSON,
    GetWarsWarIdAllyFromJSONTyped,
    GetWarsWarIdAllyToJSON,
    GetWarsWarIdAllyToJSONTyped,
} from './GetWarsWarIdAlly';
import type { GetWarsWarIdDefender } from './GetWarsWarIdDefender';
import {
    GetWarsWarIdDefenderFromJSON,
    GetWarsWarIdDefenderFromJSONTyped,
    GetWarsWarIdDefenderToJSON,
    GetWarsWarIdDefenderToJSONTyped,
} from './GetWarsWarIdDefender';

/**
 * 200 ok object
 * @export
 * @interface GetWarsWarIdOk
 */
export interface GetWarsWarIdOk {
    /**
     * 
     * @type {GetWarsWarIdAggressor}
     * @memberof GetWarsWarIdOk
     */
    aggressor: GetWarsWarIdAggressor;
    /**
     * allied corporations or alliances, each object contains either corporation_id or alliance_id
     * @type {Array<GetWarsWarIdAlly>}
     * @memberof GetWarsWarIdOk
     */
    allies?: Array<GetWarsWarIdAlly>;
    /**
     * Time that the war was declared
     * @type {Date}
     * @memberof GetWarsWarIdOk
     */
    declared: Date;
    /**
     * 
     * @type {GetWarsWarIdDefender}
     * @memberof GetWarsWarIdOk
     */
    defender: GetWarsWarIdDefender;
    /**
     * Time the war ended and shooting was no longer allowed
     * @type {Date}
     * @memberof GetWarsWarIdOk
     */
    finished?: Date;
    /**
     * ID of the specified war
     * @type {number}
     * @memberof GetWarsWarIdOk
     */
    id: number;
    /**
     * Was the war declared mutual by both parties
     * @type {boolean}
     * @memberof GetWarsWarIdOk
     */
    mutual: boolean;
    /**
     * Is the war currently open for allies or not
     * @type {boolean}
     * @memberof GetWarsWarIdOk
     */
    openForAllies: boolean;
    /**
     * Time the war was retracted but both sides could still shoot each other
     * @type {Date}
     * @memberof GetWarsWarIdOk
     */
    retracted?: Date;
    /**
     * Time when the war started and both sides could shoot each other
     * @type {Date}
     * @memberof GetWarsWarIdOk
     */
    started?: Date;
}

/**
 * Check if a given object implements the GetWarsWarIdOk interface.
 */
export function instanceOfGetWarsWarIdOk(value: object): value is GetWarsWarIdOk {
    if (!('aggressor' in value) || value['aggressor'] === undefined) return false;
    if (!('declared' in value) || value['declared'] === undefined) return false;
    if (!('defender' in value) || value['defender'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('mutual' in value) || value['mutual'] === undefined) return false;
    if (!('openForAllies' in value) || value['openForAllies'] === undefined) return false;
    return true;
}

export function GetWarsWarIdOkFromJSON(json: any): GetWarsWarIdOk {
    return GetWarsWarIdOkFromJSONTyped(json, false);
}

export function GetWarsWarIdOkFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetWarsWarIdOk {
    if (json == null) {
        return json;
    }
    return {
        
        'aggressor': GetWarsWarIdAggressorFromJSON(json['aggressor']),
        'allies': json['allies'] == null ? undefined : ((json['allies'] as Array<any>).map(GetWarsWarIdAllyFromJSON)),
        'declared': (new Date(json['declared'])),
        'defender': GetWarsWarIdDefenderFromJSON(json['defender']),
        'finished': json['finished'] == null ? undefined : (new Date(json['finished'])),
        'id': json['id'],
        'mutual': json['mutual'],
        'openForAllies': json['open_for_allies'],
        'retracted': json['retracted'] == null ? undefined : (new Date(json['retracted'])),
        'started': json['started'] == null ? undefined : (new Date(json['started'])),
    };
}

export function GetWarsWarIdOkToJSON(json: any): GetWarsWarIdOk {
    return GetWarsWarIdOkToJSONTyped(json, false);
}

export function GetWarsWarIdOkToJSONTyped(value?: GetWarsWarIdOk | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'aggressor': GetWarsWarIdAggressorToJSON(value['aggressor']),
        'allies': value['allies'] == null ? undefined : ((value['allies'] as Array<any>).map(GetWarsWarIdAllyToJSON)),
        'declared': ((value['declared']).toISOString()),
        'defender': GetWarsWarIdDefenderToJSON(value['defender']),
        'finished': value['finished'] == null ? undefined : ((value['finished']).toISOString()),
        'id': value['id'],
        'mutual': value['mutual'],
        'open_for_allies': value['openForAllies'],
        'retracted': value['retracted'] == null ? undefined : ((value['retracted']).toISOString()),
        'started': value['started'] == null ? undefined : ((value['started']).toISOString()),
    };
}

