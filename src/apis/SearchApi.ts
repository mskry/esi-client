/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdSearchOk,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from '../models/index';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdSearchOkFromJSON,
    GetCharactersCharacterIdSearchOkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models/index';

export interface GetCharactersCharacterIdSearchRequest {
    categories: Set<GetCharactersCharacterIdSearchCategoriesEnum>;
    characterId: number;
    search: string;
    acceptLanguage?: GetCharactersCharacterIdSearchAcceptLanguageEnum;
    datasource?: GetCharactersCharacterIdSearchDatasourceEnum;
    ifNoneMatch?: string;
    language?: GetCharactersCharacterIdSearchLanguageEnum;
    strict?: boolean;
    token?: string;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Search for entities that match a given sub-string.  ---  This route is cached for up to 3600 seconds
     * Search on a string
     */
    async getCharactersCharacterIdSearchRaw(requestParameters: GetCharactersCharacterIdSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCharactersCharacterIdSearchOk>> {
        if (requestParameters['categories'] == null) {
            throw new runtime.RequiredError(
                'categories',
                'Required parameter "categories" was null or undefined when calling getCharactersCharacterIdSearch().'
            );
        }

        if (requestParameters['characterId'] == null) {
            throw new runtime.RequiredError(
                'characterId',
                'Required parameter "characterId" was null or undefined when calling getCharactersCharacterIdSearch().'
            );
        }

        if (requestParameters['search'] == null) {
            throw new runtime.RequiredError(
                'search',
                'Required parameter "search" was null or undefined when calling getCharactersCharacterIdSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['categories'] != null) {
            queryParameters['categories'] = Array.from(requestParameters['categories'])!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['datasource'] != null) {
            queryParameters['datasource'] = requestParameters['datasource'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['strict'] != null) {
            queryParameters['strict'] = requestParameters['strict'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['acceptLanguage'] != null) {
            headerParameters['Accept-Language'] = String(requestParameters['acceptLanguage']);
        }

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = String(requestParameters['ifNoneMatch']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-search.search_structures.v1"]);
        }

        const response = await this.request({
            path: `/v3/characters/{character_id}/search/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters['characterId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdSearchOkFromJSON(jsonValue));
    }

    /**
     * Search for entities that match a given sub-string.  ---  This route is cached for up to 3600 seconds
     * Search on a string
     */
    async getCharactersCharacterIdSearch(requestParameters: GetCharactersCharacterIdSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCharactersCharacterIdSearchOk> {
        const response = await this.getCharactersCharacterIdSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCharactersCharacterIdSearchCategoriesEnum = {
    Agent: 'agent',
    Alliance: 'alliance',
    Character: 'character',
    Constellation: 'constellation',
    Corporation: 'corporation',
    Faction: 'faction',
    InventoryType: 'inventory_type',
    Region: 'region',
    SolarSystem: 'solar_system',
    Station: 'station',
    Structure: 'structure'
} as const;
export type GetCharactersCharacterIdSearchCategoriesEnum = typeof GetCharactersCharacterIdSearchCategoriesEnum[keyof typeof GetCharactersCharacterIdSearchCategoriesEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdSearchAcceptLanguageEnum = {
    En: 'en',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Ja: 'ja',
    Ru: 'ru',
    Zh: 'zh',
    Ko: 'ko',
    Es: 'es'
} as const;
export type GetCharactersCharacterIdSearchAcceptLanguageEnum = typeof GetCharactersCharacterIdSearchAcceptLanguageEnum[keyof typeof GetCharactersCharacterIdSearchAcceptLanguageEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdSearchDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdSearchDatasourceEnum = typeof GetCharactersCharacterIdSearchDatasourceEnum[keyof typeof GetCharactersCharacterIdSearchDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdSearchLanguageEnum = {
    En: 'en',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Ja: 'ja',
    Ru: 'ru',
    Zh: 'zh',
    Ko: 'ko',
    Es: 'es'
} as const;
export type GetCharactersCharacterIdSearchLanguageEnum = typeof GetCharactersCharacterIdSearchLanguageEnum[keyof typeof GetCharactersCharacterIdSearchLanguageEnum];
