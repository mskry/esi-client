/* tslint:disable */
/* eslint-disable */
/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequest,
  ErrorLimited,
  Forbidden,
  GatewayTimeout,
  GetCharactersCharacterIdLocationOk,
  GetCharactersCharacterIdOnlineOk,
  GetCharactersCharacterIdShipOk,
  InternalServerError,
  ServiceUnavailable,
  Unauthorized,
} from '../models/index';
import {
    BadRequestFromJSON,
    BadRequestToJSON,
    ErrorLimitedFromJSON,
    ErrorLimitedToJSON,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    GatewayTimeoutFromJSON,
    GatewayTimeoutToJSON,
    GetCharactersCharacterIdLocationOkFromJSON,
    GetCharactersCharacterIdLocationOkToJSON,
    GetCharactersCharacterIdOnlineOkFromJSON,
    GetCharactersCharacterIdOnlineOkToJSON,
    GetCharactersCharacterIdShipOkFromJSON,
    GetCharactersCharacterIdShipOkToJSON,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    ServiceUnavailableFromJSON,
    ServiceUnavailableToJSON,
    UnauthorizedFromJSON,
    UnauthorizedToJSON,
} from '../models/index';

export interface GetCharactersCharacterIdLocationRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdLocationDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdOnlineRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdOnlineDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

export interface GetCharactersCharacterIdShipRequest {
    characterId: number;
    datasource?: GetCharactersCharacterIdShipDatasourceEnum;
    ifNoneMatch?: string;
    token?: string;
}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI {

    /**
     * Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable  ---  This route is cached for up to 5 seconds
     * Get character location
     */
    async getCharactersCharacterIdLocationRaw(requestParameters: GetCharactersCharacterIdLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCharactersCharacterIdLocationOk>> {
        if (requestParameters['characterId'] == null) {
            throw new runtime.RequiredError(
                'characterId',
                'Required parameter "characterId" was null or undefined when calling getCharactersCharacterIdLocation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['datasource'] != null) {
            queryParameters['datasource'] = requestParameters['datasource'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = String(requestParameters['ifNoneMatch']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-location.read_location.v1"]);
        }

        const response = await this.request({
            path: `/v1/characters/{character_id}/location/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters['characterId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdLocationOkFromJSON(jsonValue));
    }

    /**
     * Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable  ---  This route is cached for up to 5 seconds
     * Get character location
     */
    async getCharactersCharacterIdLocation(requestParameters: GetCharactersCharacterIdLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCharactersCharacterIdLocationOk> {
        const response = await this.getCharactersCharacterIdLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks if the character is currently online  ---  This route is cached for up to 60 seconds
     * Get character online
     */
    async getCharactersCharacterIdOnlineRaw(requestParameters: GetCharactersCharacterIdOnlineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCharactersCharacterIdOnlineOk>> {
        if (requestParameters['characterId'] == null) {
            throw new runtime.RequiredError(
                'characterId',
                'Required parameter "characterId" was null or undefined when calling getCharactersCharacterIdOnline().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['datasource'] != null) {
            queryParameters['datasource'] = requestParameters['datasource'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = String(requestParameters['ifNoneMatch']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-location.read_online.v1"]);
        }

        const response = await this.request({
            path: `/v2/characters/{character_id}/online/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters['characterId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdOnlineOkFromJSON(jsonValue));
    }

    /**
     * Checks if the character is currently online  ---  This route is cached for up to 60 seconds
     * Get character online
     */
    async getCharactersCharacterIdOnline(requestParameters: GetCharactersCharacterIdOnlineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCharactersCharacterIdOnlineOk> {
        const response = await this.getCharactersCharacterIdOnlineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current ship type, name and id  ---  This route is cached for up to 5 seconds
     * Get current ship
     */
    async getCharactersCharacterIdShipRaw(requestParameters: GetCharactersCharacterIdShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCharactersCharacterIdShipOk>> {
        if (requestParameters['characterId'] == null) {
            throw new runtime.RequiredError(
                'characterId',
                'Required parameter "characterId" was null or undefined when calling getCharactersCharacterIdShip().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['datasource'] != null) {
            queryParameters['datasource'] = requestParameters['datasource'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['ifNoneMatch'] != null) {
            headerParameters['If-None-Match'] = String(requestParameters['ifNoneMatch']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("evesso", ["esi-location.read_ship_type.v1"]);
        }

        const response = await this.request({
            path: `/v1/characters/{character_id}/ship/`.replace(`{${"character_id"}}`, encodeURIComponent(String(requestParameters['characterId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCharactersCharacterIdShipOkFromJSON(jsonValue));
    }

    /**
     * Get the current ship type, name and id  ---  This route is cached for up to 5 seconds
     * Get current ship
     */
    async getCharactersCharacterIdShip(requestParameters: GetCharactersCharacterIdShipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCharactersCharacterIdShipOk> {
        const response = await this.getCharactersCharacterIdShipRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCharactersCharacterIdLocationDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdLocationDatasourceEnum = typeof GetCharactersCharacterIdLocationDatasourceEnum[keyof typeof GetCharactersCharacterIdLocationDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdOnlineDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdOnlineDatasourceEnum = typeof GetCharactersCharacterIdOnlineDatasourceEnum[keyof typeof GetCharactersCharacterIdOnlineDatasourceEnum];
/**
 * @export
 */
export const GetCharactersCharacterIdShipDatasourceEnum = {
    Tranquility: 'tranquility'
} as const;
export type GetCharactersCharacterIdShipDatasourceEnum = typeof GetCharactersCharacterIdShipDatasourceEnum[keyof typeof GetCharactersCharacterIdShipDatasourceEnum];
